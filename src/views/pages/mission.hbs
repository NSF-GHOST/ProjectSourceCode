<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Add Persona</title>
    <style>
        .without_ampm::-webkit-datetime-edit-ampm-field {
            display: none;
        }
        input[type=time]::-webkit-clear-button {
            -webkit-appearance: none;
            -moz-appearance: none;
            -o-appearance: none;
            -ms-appearance:none;
            appearance: none;
            margin: -10px; 
        }

        .persona-item, .saved-persona-item {
            display: flex;
            flex-direction: column;
            margin-bottom: 10px;
            border: 1px solid #ddd;
            padding: 10px;
            border-radius: 5px;
        }

        .persona-name {
            cursor: pointer;
            font-weight: bold;
        }

        .details-container {
            display: none; /* Hide details by default */
            margin-top: 10px;
        }

        .remove-btn {
            color: red;
            cursor: pointer;
            font-weight: bold;
            align-self: flex-end;
        }

        .device-section, .persona-form {
            margin-bottom: 15px;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 5px;
        }

        .persona-form {
            margin-top: 10px;
        }

        .form-group {
            margin-bottom: 10px;
        }

        .add-device-button, .add-schedule-button, .add-button, .save-personas-button {
            margin-top: 10px;
        }
    </style>
</head>
<body> 
    {{> nav}}

    &nbsp;&nbsp;
    <div class="container">
        <h2>Create Profile</h2>
        <form id="createProfileForm">
            <div class="form-group">
                <label for="profileName">Name:</label>
                <input type="text" id="profileName" name="profileName" required>
            </div>
            <button type="button" class="create-profile-button" onclick="createProfile()">Create Profile</button>
        </form>
        <div class="profile-id-display" id="profileIdDisplay"></div>
    </div> &nbsp;
    <div class="container">
        <div class="form-container">
            <h2>Create Persona</h2>
            <form id="personaForm">
                <div class="form-group">
                    <label for="personaName">Name:</label>
                    <input type="text" id="personaName" name="personaName" required>
                </div>
                <div class="form-group">
                    <label for="personaIMEI">IMEI:</label>
                    <input type="text" id="personaIMEI" name="personaIMEI" required>
                </div>
                <div class="form-group">
                    <label for="personaSIM">simSlot:</label>
                    <select id="personaSIM" name="personaSIM" required>
                        <option value="0">0</option>
                        <option value="1">1</option>
                        <option value="2">2</option>
                        <option value="3">3</option>
                        <option value="4">4</option>
                        <option value="5">5</option>
                        <option value="6">6</option>
                        <option value="7">7</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="activityProfile">Individual Activity Profile:</label>
                    <select id="activityProfile" name="activityProfiles" required>
                        <option value="0">0</option>
                        <option value="1">1</option>
                        <option value="2">2</option>
                        <option value="3">3</option>
                        <option value="4">4</option>
                        <option value="5">5</option>
                        <option value="6">6</option>
                        <option value="7">7</option>
                    </select>
                </div>
                <button type="button" class="add-button" onclick="createPersona()">Create Persona</button>
            </form>
            &nbsp;
            <div class="saved-personas">
                <div class="saved-personas-title">Saved Personas:</div>
                <div id="savedPersona">
                </div>
            </div>
        </div> &nbsp;
        <div class="shopping-cart">
            <div class="shopping-cart-title">Selected Personas:</div>
            <div id="cartItems">
            </div>
        </div>
    </div> &nbsp;

    <div class="container">
        <div class="form-container">
            <h2>Create Device</h2>
            <form id="deviceForm">
                <div class="form-group">
                    <label for="deviceName">Name:</label>
                    <input type="text" id="deviceName" name="deviceName" required>
                </div>
                <div class="form-group">
                    <label for="deviceOS">Operating System:</label>
                    <input type="text" id="deviceOS" name="deviceOS" required>
                </div>
                <div class="form-group">
                    <label for="deviceMan">Manufacturer:</label>
                    <input type="text" id="deviceMan" name="deviceMan" required>
                </div>
                <div class="form-group">
                    <label for="androidId">Android ID?:</label>
                    <select id="androidId" name="androidId" required>
                        <option value="0">0</option>
                        <option value="1">1</option>
                        <option value="2">2</option>
                        <option value="3">3</option>
                        <option value="4">4</option>
                        <option value="5">5</option>
                        <option value="6">6</option>
                        <option value="7">7</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="originalImei">Original IMEI:</label>
                    <input type="text" id="originalImei" name="originalImei" required>
                </div>
                <button type="button" class="add-button" onclick="createDevice()">Create Device</button>
            </form>
            &nbsp;
            <div class="saved-devices">
                <div class="saved-devices-title">Saved Devices:</div>
                <div id="savedDevices">
                </div>
            </div>
        </div> &nbsp;
        <div class="shopping-cart">
            <div class="shopping-cart-title">Selected Devices:</div>
            <div id="cartDevices">
            </div>
        </div>
    </div> &nbsp;

    <div class="container">
        <h2>Create Mission</h2>
        <form id="createMissionForm">
            <div class="form-group">
                <label for="missionName">Mission Name:</label>
                <input type="text" id="missionName" name="missionName" required>
            </div>
            <div class="form-group">
                <label for="startTime">Start Time:</label>
                <input type="datetime-local" id="startTime" name="startTime" required>
            </div>
            <div class="form-group">
                <label for="endTime">End Time:</label>
                <input type="datetime-local" id="endTime" name="endTime" required>
            </div>
            <div class="form-group">
                <label for="userId">User ID:</label>
                <select id="userId" name="userId">
                    <option value="1">1</option>
                </select>
            </div> &nbsp;
            <button type="button" class="button" onclick="addUser()">Add User</button>
        </form>

        <div id="userContainer" class="user-container"></div> &nbsp;
    </div>
    <div class="container">
        <button type="button" class="button" onclick="generatePlan()">Generate Plan</button>
    </div> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;

    <script>
        let username = '';
        fetch('/username')
            .then(response => response.json())
            .then(data => username = data.username)
            .catch(error => console.error('Error fetching username:', error));

        function generateUUID() {
            return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
                const r = Math.random() * 16 | 0, v = c === 'x' ? r : (r & 0x3 | 0x8);
                return v.toString(16);
            });
        }

        // create profile 
        let profileId = 0;

        function createProfile() {
            const form = document.getElementById('createProfileForm');
            const profileName = form.elements['profileName'].value;

            if (profileName.trim() !== '') {
                const payload = {
                    name: profileName,
                    metadata: {
                        createdBy: username,
                        created: new Date().toISOString(),
                        modifiedBy: "NA",
                        modified: new Date().toISOString()
                    }
                };

                console.log('Payload:', JSON.stringify(payload));

                profileId = 0; // fixed right now
                document.getElementById('profileIdDisplay').innerText = `Profile ID: ${profileId}`;

                console.log(`Profile created with ID: ${profileId} and Name: ${profileName}`);
            } else {
                alert('Please enter a valid profile name.');
            }
        }

        // create persona
        const personas = [];
        const savedPersonas = [];

        function createPersona() {
            const form = document.getElementById('personaForm');
            const name = form.elements['personaName'].value;
            const sim = form.elements['personaSIM'].value;
            const imei = form.elements['personaIMEI'].value;
            const activityProfile = form.elements['activityProfile'].value;

                const payload = {
                    assignedIMEI: imei,
                    simCardInformation: {
                        bankId: 1,
                        simSlot: sim
                    },
                    activityProfileId: activityProfile,
                    metadata: {
                        createdBy: username,
                        created: new Date().toISOString(),
                        modifiedBy: "string",
                        modified: new Date().toISOString()
                    }
                };

                console.log('Payload:', JSON.stringify(payload));

                console.log(`Persona created with IMEI: ${imei}, simSlot: ${sim}, Activity Profile: ${activityProfile}, and IMEI: ${imei}.`);

            
            const persona = {
                name: name,
                sim: sim,
                imei: imei,
                activity: activityProfile
            };

            if (!personas.find(p => p.name === persona.name)) {
                personas.push(persona);
                addToCart(persona);
            }

            if (!savedPersonas.find(p => p.name === persona.name)) {
                savedPersonas.push(persona);
                addToSavedPersonas(persona);
            }

            form.reset();
        }

        function addToCart(persona) {
            const personaList = document.getElementById('cartItems');
            const personaItem = document.createElement('div');
            personaItem.classList.add('persona-item');
            personaItem.innerHTML = `
                <div class="persona-name" onclick="togglePersonaDetails('${persona.name}')">${persona.name}</div>
                <div class="remove-btn" onclick="removePersona('${persona.name}')">X</div>
                <div id="details-${persona.name}" class="details-container">
                    <p><strong>IMEI:</strong> ${persona.imei}</p>
                    <p><strong>bankId:</strong> 1</p>
                    <p><strong>simSlot:</strong> ${persona.sim}</p>
                    <p><strong>Individual Activity Profile:</strong> ${persona.activity}</p>
                </div>
            `;
            personaList.appendChild(personaItem);
        }

        function addToSavedPersonas(persona) {
            const savedPersonaList = document.getElementById('savedPersona');
            const savedPersonaItem = document.createElement('div');
            savedPersonaItem.classList.add('saved-persona-item');
            savedPersonaItem.innerHTML = `
                <div class="saved-persona-name" onclick="addSavedPersonaToCart('${persona.name}')">${persona.name}</div>
                <div class="remove-btn" onclick="removeSavedPersona('${persona.name}')">X</div>
            `;
            savedPersonaList.appendChild(savedPersonaItem);
        }

        function togglePersonaDetails(name) {
            const detailsContainer = document.getElementById(`details-${name}`);
            if (detailsContainer.style.display === 'none' || detailsContainer.style.display === '') {
                detailsContainer.style.display = 'block';
            } else {
                detailsContainer.style.display = 'none';
            }
        }

        function removePersona(name) {
            const index = personas.findIndex(persona => persona.name === name);
            if (index !== -1) {
                personas.splice(index, 1);
            }

            const personaItems = document.querySelectorAll('.persona-item');
            personaItems.forEach(item => {
                if (item.querySelector('.persona-name').textContent === name) {
                    item.remove();
                }
            });

            const detailsContainer = document.getElementById(`details-${name}`);
            if (detailsContainer) {
                detailsContainer.remove();
            }
        }

        function removeSavedPersona(name) {
            const index = savedPersonas.findIndex(persona => persona.name === name);
            if (index !== -1) {
                savedPersonas.splice(index, 1);
            }

            const savedPersonaItems = document.querySelectorAll('.saved-persona-item');
            savedPersonaItems.forEach(item => {
                if (item.querySelector('.saved-persona-name').textContent === name) {
                    item.remove();
                }
            });
        }

        function addSavedPersonaToCart(name) {
            const persona = savedPersonas.find(p => p.name === name);
            if (!personas.find(p => p.name === name)) {
                personas.push(persona);
                addToCart(persona);
            }
        }

        // create device
        const devices = [];
        const savedDevices = [];

        function createDevice() {
            const form = document.getElementById('deviceForm');
            const name = form.elements['deviceName'].value;
            const os = form.elements['deviceOS'].value;
            const manufacturer = form.elements['deviceMan'].value;
            const androidId = form.elements['androidId'].value;
            const imei = form.elements['originalImei'].value;

            if (os.trim() !== '' && manufacturer.trim() !== '' && androidId.trim() !== '' && imei.trim() !== '') {
                const payload = {
                    os: os,
                    manufacturer: manufacturer,
                    restorePoint: {
                        androidId: androidId
                    },
                    metaData: {
                        createdBy: username,
                        created: new Date().toISOString(),
                        modifiedBy: "NA",
                        modified: new Date().toISOString()
                    },
                    originalImei: imei
                };

                console.log('Payload:', JSON.stringify(payload));

                console.log(`Device created with OS: ${os}, Manufacturer: ${manufacturer}, and original IMEI ${imei}.`);

                const device = {
                    name: name,
                    os: os,
                    manufacturer: manufacturer,
                    androidId: androidId,
                    originalImei: imei
                };
                if (!devices.find(d => d.name === device.name)) {
                    devices.push(device);
                    addDeviceToCart(device);
                }
                if (!savedDevices.find(d => d.name === device.name)) {
                    savedDevices.push(device);
                    addToSavedDevices(device);
                }
            } else {
                alert('Please fill in all the fields.');
            }
            form.reset();
        }

        function addDeviceToCart(device) {
            const deviceList = document.getElementById('cartDevices');
            const deviceItem = document.createElement('div');
            deviceItem.classList.add('device-item');
            deviceItem.innerHTML = `
                <div class="device-name" onclick="togglePersonaDetails('${device.name}')">${device.name}</div>
                <div class="remove-btn" onclick="removePersona('${device.name}')">X</div>
                <div id="details-${device.name}" class="details-container">
                    <p><strong>OS:</strong> ${device.os}</p>
                    <p><strong>Manufacturer:</strong> ${device.manufacturer}</p>
                    <p><strong>androidId:</strong> ${device.androidId}</p>
                    <p><strong>originalIMEI:</strong> ${device.originalImei}</p>
                </div>
            `;
            deviceList.appendChild(deviceItem);
        }

        function addToSavedDevices(device) {
            const savedDeviceList = document.getElementById('savedDevices');
            const savedDeviceItem = document.createElement('div');
            savedDeviceItem.classList.add('saved-device-item');
            savedDeviceItem.innerHTML = `
                <div class="saved-device-name" onclick="addSavedDeviceToCart('${device.name}')">${device.name}</div>
                <div class="remove-btn" onclick="removeSavedDevice('${device.name}')">X</div>
            `;
            savedDeviceList.appendChild(savedDeviceItem);
        }

        function removeDevice(name) {
            const index = devices.findIndex(device => device.name === name);
            if (index !== -1) {
                devices.splice(index, 1);
            }

            const deviceItems = document.querySelectorAll('.device-item');
            deviceItems.forEach(item => {
                if (item.querySelector('.device-name').textContent === name) {
                    item.remove();
                }
            });

            const detailsContainer = document.getElementById(`details-${name}`);
            if (detailsContainer) {
                detailsContainer.remove();
            }
        }

        function removeSavedDevices(name) {
            const index = savedDevices.findIndex(device => device.name === name);
            if (index !== -1) {
                savedDevices.splice(index, 1);
            }

            const savedDeviceItems = document.querySelectorAll('.saved-device-item');
            savedDeviceItems.forEach(item => {
                if (item.querySelector('.saved-device-name').textContent === name) {
                    item.remove();
                }
            });
        }

        function addSavedDeviceToCart(name) {
            const device = savedDevices.find(d => d.name === name);
            if (!devices.find(d => d.name === name)) {
                devices.push(device);
                addToCart(device);
            }
        }

        /*
        // summarized into createPersonas()

        async function savePersonas() {
            const personasToSave = personas.map(persona => {
                return {
                    personaID: 0,
                    assignedIMEI: persona.imei,
                    simCardInformation: {
                        bankId: 1,
                        simSlot: persona.sim
                    },
                    activityProfileId: persona.activity,
                    metadata: {
                        createBy: username,
                        created: new Date().toISOString(),
                        modifiedBy: "NA",
                        modified: new Date().toISOString()
                    }
                };
            });

            try {
                const response = await fetch('/save-personas', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(personasToSave)
                });

                if (!response.ok) {
                    throw new Error('Network response was not ok ' + response.statusText);
                }

                const result = await response.json();
                console.log(result.message);
                showAlert(personas.map(persona => persona.name));
            } catch (error) {
                console.error('Error saving personas:', error);
            }
        }
        */

        function showAlert(personaNames) {
            const message = `Personas saved successfully:\n\n${personaNames.map(name => `• ${name}`).join('\n')}`;
            alert(message);
        }
/*
        document.addEventListener('DOMContentLoaded', () => {
            fetchActivityProfiles();
        });


        async function fetchActivityProfiles() {
            try {
                const response = await fetch('/activity-profiles');
                const profiles = await response.json();
                const activityProfileSelect = document.getElementById('activityProfile');
                profiles.forEach(profile => {
                    const option = document.createElement('option');
                    option.value = profile;
                    option.textContent = profile;
                    activityProfileSelect.appendChild(option);
                });
            } catch (error) {
                console.error('Error fetching activity profiles:', error);
            }
        }
*/
        function addPersonaForm(deviceId) {
            const container = document.getElementById(`personaFormContainer-${deviceId}`);
            const formId = generateUUID();
            const personaForm = document.createElement('div');
            personaForm.classList.add('persona-form');
            personaForm.id = formId;
            personaForm.innerHTML = `
                <label for="persona-${formId}">Persona:</label>
                <input type="text" id="persona-${formId}" name="persona" required>
                <label for="startTime-${formId}">Start Time:</label>
                <input type="datetime-local" id="startTime-${formId}" name="startTime" required>
                <label for="endTime-${formId}">End Time:</label>
                <input type="datetime-local" id="endTime-${formId}" name="endTime" required>
                <label for="jitter-${formId}">Jitter:</label>
                <input type="number" id="jitter-${formId}" name="jitter" required>
                <button type="button" class="remove-btn" onclick="removePersonaForm('${formId}')">Remove Persona</button>
            `;
            container.appendChild(personaForm);
        }

        function removePersonaForm(formId) {
            const form = document.getElementById(formId);
            if (form) {
                form.remove();
            }
        }

        let mission = {
            active: false,
            config: {
                name: "",
                startTimeInMs: "",
                endTimeInMs: "",
                details: [
                ]
            },
            profileId: 0,
            metaData: {
                createdBy: username,
                created: new Date().toISOString(),
                modifiedBy: "NA",
                modified: new Date().toISOString()
            },
        }

        function addUser() {
            const userId = document.getElementById('userId').value;
            const userContainer = document.getElementById('userContainer');

            const userElement = document.createElement('div');
            userElement.className = 'user';
            userElement.innerHTML = `&nbsp;
                <h4>User ID: ${userId}</h4>
                <div class="task-container">
                    <label for="taskType${userId}">Task Type:</label>
                    <select id="taskType${userId}" name="taskType">
                        <option value="PERSONA_SWAP">PERSONA_SWAP</option>
                    </select>
                    <button type="button" onclick="addTask(${userId})">Add Task</button>
                    <div id="tasksContainer${userId}"></div>
                </div>
            `;

            userContainer.appendChild(userElement);

            // add user details structure to the mission config
            mission.config.details.push({
                userId: userId,
                "tasks": []
            });
        }

        function addTask(userId) {
            const taskType = document.getElementById(`taskType${userId}`).value;
            const tasksContainer = document.getElementById(`tasksContainer${userId}`);

            if (taskType === 'PERSONA_SWAP') {
                const taskElement = document.createElement('div');
                taskElement.className = 'task';
                taskElement.innerHTML = `&nbsp;
                    <div class="form-group">
                        <label for="personaId${userId}">Persona ID:</label>
                        <input type="text" id="personaId${userId}" name="personaId" required>
                    </div>
                    <div class="form-group">
                        <label for="duration${userId}">Duration (mm:ss):</label>
                        <input type="text" id="duration${userId}" name="duration" pattern="^[0-5]?[0-9]:[0-5][0-9]$" title="Duration must be in the format mm:ss" required>
                    </div>
                    <button type="button" onclick="saveTask(${userId})">Save Task</button>
                `;

                tasksContainer.appendChild(taskElement);
            }
        }

        function saveTask(userId) {
            const personaId = document.getElementById(`personaId${userId}`).value;
            const duration = document.getElementById(`duration${userId}`).value.split(':');
            const durationInMs = (parseInt(duration[0]) * 60 + parseInt(duration[1])) * 1000;

            // Find the device details in the mission config
            const userDetails = mission.config.details.find(detail => detail.userId === "user1");

            const task = {
                order: userDetails.tasks.length,
                duration: durationInMs,
                execute: "PERSONA_SWAP",
                parameters: [personaId]
            };

            userDetails.tasks.push(task);

            alert('Task successfully saved');
        }

        function generatePlan() {
            const missionName = document.getElementById('missionName').value;
            const startTime = new Date(document.getElementById('startTime').value).getTime();
            const endTime = new Date(document.getElementById('endTime').value).getTime();

            mission.config.name = missionName;
            mission.config.startTimeInMs = startTime;
            mission.config.endTimeInMs = endTime;

            console.log('Mission Payload:', JSON.stringify(mission, null, 2));
        }
    </script>
</body>
</html>
