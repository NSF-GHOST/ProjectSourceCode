<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Add Persona</title>
    <style>
        .persona-item, .saved-persona-item {
            display: flex;
            flex-direction: column;
            margin-bottom: 10px;
            border: 1px solid #ddd;
            padding: 10px;
            border-radius: 5px;
        }

        .persona-name {
            cursor: pointer;
            font-weight: bold;
        }

        .details-container {
            display: none; /* Hide details by default */
            margin-top: 10px;
        }

        .remove-btn {
            color: red;
            cursor: pointer;
            font-weight: bold;
            align-self: flex-end;
        }

        .device-section, .persona-form {
            margin-bottom: 15px;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 5px;
        }

        .persona-form {
            margin-top: 10px;
        }

        .form-group {
            margin-bottom: 10px;
        }

        .add-device-button, .add-schedule-button, .add-button, .save-personas-button {
            margin-top: 10px;
        }
    </style>
</head>
<body>
    {{> nav}}
    <div class="container">
        <div class="form-container">
            <h2>Add Persona</h2>
            <form id="personaForm">
                <div class="form-group">
                    <label for="personaName">Name:</label>
                    <input type="text" id="personaName" name="personaName" required>
                </div>
                <div class="form-group">
                    <label for="personaSIM">SIM:</label>
                    <input type="text" id="personaSIM" name="personaSIM" required>
                </div>
                <div class="form-group">
                    <label for="personaIMEI">IMEI:</label>
                    <input type="text" id="personaIMEI" name="personaIMEI" required>
                </div>
                <div class="form-group">
                    <label for="activityProfile">Individual Activity Profile:</label>
                    <input type="text" id="activityProfile" name="activityProfile" required>
                </div>
                <button type="button" class="add-button" onclick="addPersona()">Add</button>
                <button type="button" class="save-personas-button" onclick="savePersonas()">Save Personas</button>
            </form>

            <div class="saved-profiles">
                <div class="saved-profiles-title">Saved Profiles:</div>
                <div id="savedProfiles">
                </div>
            </div>
        </div>

        <div class="shopping-cart">
            <div class="shopping-cart-title">Selected Personas:</div>
            <div id="cartItems">
            </div>
        </div>
    </div>

    <div class="container">
        <h2>Mission Plan</h2>
        <div><strong>Plan ID:</strong> <span id="planId"></span></div>
        <button type="button" class="add-device-button" onclick="addDevice()">+ Add Device</button>
        <div id="deviceSections"></div>
        <button type="button" class="add-schedule-button" onclick="generatePlan()">Generate Plan</button>
    </div>

    <script>
        let username = '';
        const personas = [];
        const savedPersonas = [];

        fetch('/username')
            .then(response => response.json())
            .then(data => username = data.username)
            .catch(error => console.error('Error fetching username:', error));

        function generateUUID() {
            return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
                const r = Math.random() * 16 | 0, v = c === 'x' ? r : (r & 0x3 | 0x8);
                return v.toString(16);
            });
        }

        function addPersona() {
            const form = document.getElementById('personaForm');
            const personaName = form.elements['personaName'].value;
            const personaSIM = form.elements['personaSIM'].value;
            const personaIMEI = form.elements['personaIMEI'].value;
            const activityProfile = form.elements['activityProfile'].value;

            const persona = {
                name: personaName,
                sim: personaSIM,
                imei: personaIMEI,
                activity: activityProfile
            };

            if (!personas.find(p => p.name === persona.name)) {
                personas.push(persona);
                addToCart(persona);
            }

            if (!savedPersonas.find(p => p.name === persona.name)) {
                savedPersonas.push(persona);
                addToSavedProfiles(persona);
            }

            form.reset();
        }

        function addToCart(persona) {
            const personaList = document.getElementById('cartItems');
            const personaItem = document.createElement('div');
            personaItem.classList.add('persona-item');
            personaItem.innerHTML = `
                <div class="persona-name" onclick="togglePersonaDetails('${persona.name}')">${persona.name}</div>
                <div class="remove-btn" onclick="removePersona('${persona.name}')">X</div>
                <div id="details-${persona.name}" class="details-container">
                    <p><strong>SIM:</strong> ${persona.sim}</p>
                    <p><strong>IMEI:</strong> ${persona.imei}</p>
                    <p><strong>Individual Activity Profile:</strong> ${persona.activity}</p>
                </div>
            `;
            personaList.appendChild(personaItem);
        }

        function addToSavedProfiles(persona) {
            const savedProfilesList = document.getElementById('savedProfiles');
            const savedPersonaItem = document.createElement('div');
            savedPersonaItem.classList.add('saved-persona-item');
            savedPersonaItem.innerHTML = `
                <div class="saved-persona-name" onclick="addSavedPersonaToCart('${persona.name}')">${persona.name}</div>
                <div class="remove-btn" onclick="removeSavedPersona('${persona.name}')">X</div>
            `;
            savedProfilesList.appendChild(savedPersonaItem);
        }

        function togglePersonaDetails(name) {
            const detailsContainer = document.getElementById(`details-${name}`);
            if (detailsContainer.style.display === 'none' || detailsContainer.style.display === '') {
                detailsContainer.style.display = 'block';
            } else {
                detailsContainer.style.display = 'none';
            }
        }

        function removePersona(name) {
            const index = personas.findIndex(persona => persona.name === name);
            if (index !== -1) {
                personas.splice(index, 1);
            }

            const personaItems = document.querySelectorAll('.persona-item');
            personaItems.forEach(item => {
                if (item.querySelector('.persona-name').textContent === name) {
                    item.remove();
                }
            });

            const detailsContainer = document.getElementById(`details-${name}`);
            if (detailsContainer) {
                detailsContainer.remove();
            }
        }

        function removeSavedPersona(name) {
            const index = savedPersonas.findIndex(persona => persona.name === name);
            if (index !== -1) {
                savedPersonas.splice(index, 1);
            }

            const savedPersonaItems = document.querySelectorAll('.saved-persona-item');
            savedPersonaItems.forEach(item => {
                if (item.querySelector('.saved-persona-name').textContent === name) {
                    item.remove();
                }
            });
        }

        function addSavedPersonaToCart(name) {
            const persona = savedPersonas.find(p => p.name === name);
            if (!personas.find(p => p.name === name)) {
                personas.push(persona);
                addToCart(persona);
            }
        }

        async function savePersonas() {
            const personasToSave = personas.map(persona => {
                return {
                    personaID: 0,
                    assignedIMEI: persona.imei,
                    assignedSimCardId: persona.sim,
                    assignedIndivActivityProfile: persona.activity,
                    metadata: {
                        createBy: username,
                        created: new Date().toISOString(),
                        modifiedBy: "NA",
                        modified: new Date().toISOString()
                    }
                };
            });

            try {
                const response = await fetch('/save-personas', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(personasToSave)
                });

                if (!response.ok) {
                    throw new Error('Network response was not ok ' + response.statusText);
                }

                const result = await response.json();
                console.log(result.message);
                showAlert(personas.map(persona => persona.name));
            } catch (error) {
                console.error('Error saving personas:', error);
            }
        }

        function showAlert(personaNames) {
            const message = `Personas saved successfully:\n\n${personaNames.map(name => `â€¢ ${name}`).join('\n')}`;
            alert(message);
        }

        document.addEventListener('DOMContentLoaded', () => {
            fetchActivityProfiles();
        });

        async function fetchActivityProfiles() {
            try {
                const response = await fetch('/activity-profiles');
                const profiles = await response.json();
                const activityProfileSelect = document.getElementById('activityProfile');
                profiles.forEach(profile => {
                    const option = document.createElement('option');
                    option.value = profile;
                    option.textContent = profile;
                    activityProfileSelect.appendChild(option);
                });
            } catch (error) {
                console.error('Error fetching activity profiles:', error);
            }
        }

        function addDevice() {
            const deviceSections = document.getElementById('deviceSections');
            const deviceId = generateUUID();
            const deviceSection = document.createElement('div');
            deviceSection.classList.add('device-section');
            deviceSection.innerHTML = `
                <div><strong>Device ID:</strong> ${deviceId}</div>
                <button type="button" class="add-button" onclick="addPersonaForm('${deviceId}')">+ Add Persona</button>
                <div id="personaFormContainer-${deviceId}"></div>
            `;
            deviceSections.appendChild(deviceSection);
        }

        function addPersonaForm(deviceId) {
            const container = document.getElementById(`personaFormContainer-${deviceId}`);
            const formId = generateUUID();
            const personaForm = document.createElement('div');
            personaForm.classList.add('persona-form');
            personaForm.id = formId;
            personaForm.innerHTML = `
                <label for="persona-${formId}">Persona:</label>
                <input type="text" id="persona-${formId}" name="persona" required>
                <label for="startTime-${formId}">Start Time:</label>
                <input type="datetime-local" id="startTime-${formId}" name="startTime" required>
                <label for="endTime-${formId}">End Time:</label>
                <input type="datetime-local" id="endTime-${formId}" name="endTime" required>
                <label for="jitter-${formId}">Jitter:</label>
                <input type="number" id="jitter-${formId}" name="jitter" required>
                <button type="button" class="remove-btn" onclick="removePersonaForm('${formId}')">Remove Persona</button>
            `;
            container.appendChild(personaForm);
        }

        function removePersonaForm(formId) {
            const form = document.getElementById(formId);
            if (form) {
                form.remove();
            }
        }

        function generatePlan() {
            const planId = generateUUID();
            document.getElementById('planId').textContent = planId;
            alert(`Plan ID: ${planId}`);
        }
    </script>
</body>
</html>
